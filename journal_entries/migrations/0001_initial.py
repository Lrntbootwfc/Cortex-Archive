# Generated by Django 5.2.5 on 2025-08-31 09:55

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', models.JSONField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('mood_tag', models.CharField(blank=True, choices=[('happy', 'Happy'), ('sad', 'Sad'), ('excited', 'Excited'), ('calm', 'Calm'), ('anxious', 'Anxious'), ('angry', 'Angry'), ('grateful', 'Grateful'), ('other', 'Other')], max_length=50)),
                ('is_locked', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='journal_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Journal Entry',
                'verbose_name_plural': 'Journal Entries',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='ComicEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comic_image', models.ImageField(upload_to='comics/')),
                ('date_generated', models.DateTimeField(auto_now_add=True)),
                ('generation_prompt', models.TextField(blank=True)),
                ('journal_entry', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='comic_entry', to='journal_entries.journalentry')),
            ],
            options={
                'verbose_name': 'Comic Entry',
                'verbose_name_plural': 'Comic Entries',
            },
        ),
        migrations.CreateModel(
            name='MediaAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='media/')),
                ('file_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('audio', 'Audio'), ('document', 'Document'), ('other', 'Other')], max_length=50)),
                ('caption', models.CharField(blank=True, max_length=255)),
                ('date_uploaded', models.DateTimeField(auto_now_add=True)),
                ('journal_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media_assets', to='journal_entries.journalentry')),
            ],
            options={
                'verbose_name': 'Media Asset',
                'verbose_name_plural': 'Media Assets',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experience_points', models.IntegerField(default=0)),
                ('level', models.IntegerField(default=1)),
                ('bio', models.TextField(blank=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
    ]
